/**
 * Options for {@link transformAst}
 *
 * @internal
 * @typedef {TransformAstOptionsWithLocationUnmap | TransformAstOptionsWithoutSourceMap} TransformAstOptions
 */
/**
 * Options for {@link transformAst}
 *
 * If `useLocationUnmap` is not `true`, `sourceMap` is unused.
 *
 * @internal
 * @typedef TransformAstOptionsWithoutSourceMap
 * @property {false} [useLocationUnmap] - Enable location unmapping
 * @property {string} [sourceMap] - Original source map
 */
/**
 * Options for {@link transformAst}
 *
 * If `useLocationUnmap` is `true`, then `sourceMap` must also be present.
 *
 * @internal
 * @typedef TransformAstOptionsWithLocationUnmap
 * @property {true} useLocationUnmap - Enable location unmapping
 * @property {string} sourceMap - Original source map
 */
/**
 * Performs transformations on the given AST
 *
 * This function mutates `ast`.
 *
 * @internal
 * @param {import('@babel/types').File} ast - AST, as generated by Babel
 * @param {TransformAstOptions} [opts]
 * @returns {Promise<void>}
 */
export function transformAst(ast: import('@babel/types').File, { sourceMap, useLocationUnmap }?: TransformAstOptions | undefined): Promise<void>;
/**
 * Options for {@link transformAst }
 */
export type TransformAstOptions = TransformAstOptionsWithLocationUnmap | TransformAstOptionsWithoutSourceMap;
/**
 * Options for {@link transformAst }
 *
 * If `useLocationUnmap` is not `true`, `sourceMap` is unused.
 */
export type TransformAstOptionsWithoutSourceMap = {
    /**
     * - Enable location unmapping
     */
    useLocationUnmap?: false | undefined;
    /**
     * - Original source map
     */
    sourceMap?: string | undefined;
};
/**
 * Options for {@link transformAst }
 *
 * If `useLocationUnmap` is `true`, then `sourceMap` must also be present.
 */
export type TransformAstOptionsWithLocationUnmap = {
    /**
     * - Enable location unmapping
     */
    useLocationUnmap: true;
    /**
     * - Original source map
     */
    sourceMap: string;
};
//# sourceMappingURL=transform-ast.d.ts.map